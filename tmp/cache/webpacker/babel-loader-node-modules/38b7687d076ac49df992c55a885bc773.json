{"ast":null,"code":"var startUserTimer = function startUserTimer() {\n  var winpointsBTN = document.getElementById('increaseWinpointsBTN');\n  winpointsBTN.addEventListener(\"click\", function () {\n    localStorage.setItem(\"startTime\", new Date().getTime());\n    localStorage.setItem(\"endTime\", parseInt(localStorage.getItem(\"startTime\")) + 900000);\n    console.log(localStorage.getItem(\"startTime\"));\n    console.log(localStorage.getItem(\"endTime\"));\n    localStorage.setItem(\"timerRunning\", true);\n    console.log(localStorage.getItem(\"timerRunning\"));\n    winpointsBTN.style.display = \"none\";\n  });\n};\n\nsetInterval(function () {\n  if (localStorage.getItem(\"timerRunning\") == \"true\") {\n    var timer_clock = document.getElementById('timer_clock');\n    var delta = parseInt(localStorage.getItem(\"endTime\")) - parseInt(localStorage.getItem(\"startTime\")); // milliseconds elapsed since start\n\n    var hours = Math.floor(delta % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));\n    var minutes = Math.floor(delta % (1000 * 60 * 60) / (1000 * 60));\n    var seconds = Math.floor(delta % (1000 * 60) / 1000);\n    timer_clock.innerHTML = \"Time until respawn: \".concat(hours, \":\").concat(minutes, \":\").concat(seconds);\n    console.log(\"test\");\n  }\n}, 1000);\nexport { startUserTimer };","map":{"version":3,"sources":["/Users/cornelius/Code/GreenImpact-1/app/javascript/components/user_timer.js"],"names":["startUserTimer","winpointsBTN","document","getElementById","addEventListener","localStorage","setItem","Date","getTime","parseInt","getItem","console","log","style","display","setInterval","timer_clock","delta","hours","Math","floor","minutes","seconds","innerHTML"],"mappings":"AAAA,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3B,MAAMC,YAAY,GAAGC,QAAQ,CAACC,cAAT,CAAwB,sBAAxB,CAArB;AACAF,EAAAA,YAAY,CAACG,gBAAb,CAA8B,OAA9B,EAAuC,YAAM;AAC3CC,IAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkC,IAAIC,IAAJ,GAAWC,OAAX,EAAlC;AACAH,IAAAA,YAAY,CAACC,OAAb,CAAqB,SAArB,EAAiCG,QAAQ,CAACJ,YAAY,CAACK,OAAb,CAAqB,WAArB,CAAD,CAAR,GAA8C,MAA/E;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYP,YAAY,CAACK,OAAb,CAAqB,WAArB,CAAZ;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYP,YAAY,CAACK,OAAb,CAAqB,SAArB,CAAZ;AACAL,IAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqC,IAArC;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYP,YAAY,CAACK,OAAb,CAAqB,cAArB,CAAZ;AACAT,IAAAA,YAAY,CAACY,KAAb,CAAmBC,OAAnB,GAA6B,MAA7B;AACD,GARD;AASD,CAXD;;AAcAC,WAAW,CAAC,YAAW;AACrB,MAAIV,YAAY,CAACK,OAAb,CAAqB,cAArB,KAAwC,MAA5C,EAAoD;AAClD,QAAMM,WAAW,GAAGd,QAAQ,CAACC,cAAT,CAAwB,aAAxB,CAApB;AACA,QAAIc,KAAK,GAAGR,QAAQ,CAACJ,YAAY,CAACK,OAAb,CAAqB,SAArB,CAAD,CAAR,GAA4CD,QAAQ,CAACJ,YAAY,CAACK,OAAb,CAAqB,WAArB,CAAD,CAAhE,CAFkD,CAEmD;;AACrG,QAAIQ,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAYH,KAAK,IAAI,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAArB,CAAN,IAAmC,OAAO,EAAP,GAAY,EAA/C,CAAX,CAAZ;AACA,QAAII,OAAO,GAAGF,IAAI,CAACC,KAAL,CAAYH,KAAK,IAAI,OAAO,EAAP,GAAY,EAAhB,CAAN,IAA8B,OAAO,EAArC,CAAX,CAAd;AACA,QAAIK,OAAO,GAAGH,IAAI,CAACC,KAAL,CAAYH,KAAK,IAAI,OAAO,EAAX,CAAN,GAAwB,IAAnC,CAAd;AACAD,IAAAA,WAAW,CAACO,SAAZ,iCAA+CL,KAA/C,cAAwDG,OAAxD,cAAmEC,OAAnE;AACAX,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACD;AACF,CAVU,EAUR,IAVQ,CAAX;AAYA,SAASZ,cAAT","sourcesContent":["const startUserTimer = () => {\n  const winpointsBTN = document.getElementById('increaseWinpointsBTN');\n  winpointsBTN.addEventListener(\"click\", () => {\n    localStorage.setItem(\"startTime\", new Date().getTime()); \n    localStorage.setItem(\"endTime\", (parseInt(localStorage.getItem(\"startTime\")) + 900000));\n    console.log(localStorage.getItem(\"startTime\"));\n    console.log(localStorage.getItem(\"endTime\"));\n    localStorage.setItem(\"timerRunning\", true);\n    console.log(localStorage.getItem(\"timerRunning\"));\n    winpointsBTN.style.display = \"none\";\n  });\n};\n\n\nsetInterval(function() {\n  if (localStorage.getItem(\"timerRunning\") == \"true\") {\n    const timer_clock = document.getElementById('timer_clock');\n    var delta = parseInt(localStorage.getItem(\"endTime\")) - parseInt(localStorage.getItem(\"startTime\")); // milliseconds elapsed since start\n    var hours = Math.floor((delta % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n    var minutes = Math.floor((delta % (1000 * 60 * 60)) / (1000 * 60));\n    var seconds = Math.floor((delta % (1000 * 60)) / 1000);\n    timer_clock.innerHTML = `Time until respawn: ${hours}:${minutes}:${seconds}`;\n    console.log(\"test\");\n  }\n}, 1000);\n\nexport { startUserTimer }"]},"metadata":{},"sourceType":"module"}