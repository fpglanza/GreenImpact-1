{"ast":null,"code":"var startUserTimer = function startUserTimer() {\n  var winpointsBTN = document.getElementById('increaseWinpointsBTN'); //get winpoints BTN\n\n  winpointsBTN.addEventListener(\"click\", function () {\n    //check for button click\n    localStorage.setItem(\"endTime\", new Date().getTime() + 3600000); //Save endTime(currentTime + 1 hour) to local storage\n\n    localStorage.setItem(\"timerRunning\", true); //Save timerRunning to localStorage\n\n    winpointsBTN.style.display = \"none\"; //Hide WinpointsBTN\n  });\n};\n\nvar timer = setInterval(function () {\n  //Create a timer function that runs every second\n  if (localStorage.getItem(\"timerRunning\")) {\n    //Check if timer is running\n    var timer_clock = document.getElementById('timer_clock'); //Get HTML element\n\n    var now = new Date().getTime(); //Get current time\n\n    var delta = parseInt(localStorage.getItem(\"endTime\")) - now; // milliseconds elapsed since start\n\n    var minutes = Math.floor(delta % (1000 * 60 * 60) / (1000 * 60)); //Get minutes left\n\n    var seconds = Math.floor(delta % (1000 * 60) / 1000); //Get seconds left\n\n    timer_clock.innerHTML = \"Time until respawn: \".concat(minutes, \":\").concat(seconds); //Display time left in view\n\n    if (delta <= 0) {\n      //Check if timer has stopped\n      stopUserTimer();\n    }\n  }\n}, 1000);\n\nvar stopUserTimer = function stopUserTimer() {\n  var timer_clock = document.getElementById('timer_clock');\n  var winpointsBTN = document.getElementById('increaseWinpointsBTN'); //get winpoints BTN\n\n  localStorage.removeItem(\"endTime\"); //Remove time from localStorage\n\n  localStorage.removeItem(\"timerRunning\"); //Remove timerRunning from localStorage\n\n  clearInterval(timer); //Stop the interval function timer\n\n  timer_clock.innerHTML = \"\"; //Hide the timer clock\n\n  winpointsBTN.style.display = \"\";\n};\n\nexport { startUserTimer };","map":{"version":3,"sources":["/Users/cornelius/Code/GreenImpact-1/app/javascript/components/user_timer.js"],"names":["startUserTimer","winpointsBTN","document","getElementById","addEventListener","localStorage","setItem","Date","getTime","style","display","timer","setInterval","getItem","timer_clock","now","delta","parseInt","minutes","Math","floor","seconds","innerHTML","stopUserTimer","removeItem","clearInterval"],"mappings":"AAAA,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3B,MAAMC,YAAY,GAAGC,QAAQ,CAACC,cAAT,CAAwB,sBAAxB,CAArB,CAD2B,CAC2C;;AACtEF,EAAAA,YAAY,CAACG,gBAAb,CAA8B,OAA9B,EAAuC,YAAM;AAAE;AAC7CC,IAAAA,YAAY,CAACC,OAAb,CAAqB,SAArB,EAAiC,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,OAAxD,EAD2C,CACwB;;AACnEH,IAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqC,IAArC,EAF2C,CAEC;;AAC5CL,IAAAA,YAAY,CAACQ,KAAb,CAAmBC,OAAnB,GAA6B,MAA7B,CAH2C,CAGN;AACtC,GAJD;AAKD,CAPD;;AASC,IAAIC,KAAK,GAAGC,WAAW,CAAC,YAAW;AAAE;AACpC,MAAIP,YAAY,CAACQ,OAAb,CAAqB,cAArB,CAAJ,EAA0C;AAAE;AAC1C,QAAMC,WAAW,GAAGZ,QAAQ,CAACC,cAAT,CAAwB,aAAxB,CAApB,CADwC,CACoB;;AAC5D,QAAIY,GAAG,GAAG,IAAIR,IAAJ,GAAWC,OAAX,EAAV,CAFwC,CAER;;AAChC,QAAIQ,KAAK,GAAGC,QAAQ,CAACZ,YAAY,CAACQ,OAAb,CAAqB,SAArB,CAAD,CAAR,GAA4CE,GAAxD,CAHwC,CAGqB;;AAC7D,QAAIG,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAYJ,KAAK,IAAI,OAAO,EAAP,GAAY,EAAhB,CAAN,IAA8B,OAAO,EAArC,CAAX,CAAd,CAJwC,CAI4B;;AACpE,QAAIK,OAAO,GAAGF,IAAI,CAACC,KAAL,CAAYJ,KAAK,IAAI,OAAO,EAAX,CAAN,GAAwB,IAAnC,CAAd,CALwC,CAKgB;;AACxDF,IAAAA,WAAW,CAACQ,SAAZ,iCAA+CJ,OAA/C,cAA0DG,OAA1D,EANwC,CAM6B;;AACrE,QAAIL,KAAK,IAAI,CAAb,EAAgB;AAAE;AAChBO,MAAAA,aAAa;AACd;AACF;AACD,CAZsB,EAYpB,IAZoB,CAAvB;;AAcD,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1B,MAAMT,WAAW,GAAGZ,QAAQ,CAACC,cAAT,CAAwB,aAAxB,CAApB;AACA,MAAMF,YAAY,GAAGC,QAAQ,CAACC,cAAT,CAAwB,sBAAxB,CAArB,CAF0B,CAE4C;;AACtEE,EAAAA,YAAY,CAACmB,UAAb,CAAwB,SAAxB,EAH0B,CAGU;;AACpCnB,EAAAA,YAAY,CAACmB,UAAb,CAAwB,cAAxB,EAJ0B,CAIe;;AACzCC,EAAAA,aAAa,CAACd,KAAD,CAAb,CAL0B,CAKJ;;AACtBG,EAAAA,WAAW,CAACQ,SAAZ,GAAwB,EAAxB,CAN0B,CAME;;AAC5BrB,EAAAA,YAAY,CAACQ,KAAb,CAAmBC,OAAnB,GAA6B,EAA7B;AACD,CARD;;AAUA,SAASV,cAAT","sourcesContent":["const startUserTimer = () => {\n  const winpointsBTN = document.getElementById('increaseWinpointsBTN'); //get winpoints BTN\n  winpointsBTN.addEventListener(\"click\", () => { //check for button click\n    localStorage.setItem(\"endTime\", (new Date().getTime() + 3600000)); //Save endTime(currentTime + 1 hour) to local storage\n    localStorage.setItem(\"timerRunning\", true); //Save timerRunning to localStorage\n    winpointsBTN.style.display = \"none\"; //Hide WinpointsBTN\n  });\n};\n\n var timer = setInterval(function() { //Create a timer function that runs every second\n  if (localStorage.getItem(\"timerRunning\")) { //Check if timer is running\n    const timer_clock = document.getElementById('timer_clock'); //Get HTML element\n    var now = new Date().getTime(); //Get current time\n    var delta = parseInt(localStorage.getItem(\"endTime\")) - now; // milliseconds elapsed since start\n    var minutes = Math.floor((delta % (1000 * 60 * 60)) / (1000 * 60)); //Get minutes left\n    var seconds = Math.floor((delta % (1000 * 60)) / 1000); //Get seconds left\n    timer_clock.innerHTML = `Time until respawn: ${minutes}:${seconds}`; //Display time left in view\n    if (delta <= 0) { //Check if timer has stopped\n      stopUserTimer();\n    }\n  }\n }, 1000);\n\nconst stopUserTimer = () => {\n  const timer_clock = document.getElementById('timer_clock');\n  const winpointsBTN = document.getElementById('increaseWinpointsBTN'); //get winpoints BTN\n  localStorage.removeItem(\"endTime\"); //Remove time from localStorage\n  localStorage.removeItem(\"timerRunning\"); //Remove timerRunning from localStorage\n  clearInterval(timer); //Stop the interval function timer\n  timer_clock.innerHTML = \"\"; //Hide the timer clock\n  winpointsBTN.style.display = \"\";\n}\n  \nexport { startUserTimer }"]},"metadata":{},"sourceType":"module"}